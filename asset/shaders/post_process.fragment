#include "common.glsl"

out vec4 color;

in vec4 f_color;
in vec2 f_uv;

uniform sampler2D new_frame;
uniform sampler2D old_frame;
uniform sampler2D freeze_frame;

uniform sampler2D perlin_noise;
uniform sampler2D chaotic_noise;

// SCREEN FADE
uniform bool screen_fade;
uniform float screen_fade_time;

// DISSOLVE
uniform bool dissolve;
uniform float dissolve_time;

// DOOR
uniform bool door;
uniform float door_amount;
 
void main() {
	vec4 red = vec4(1.0, 0.0, 0.0, 1.0);
	vec4 green = vec4(0.0, 1.0, 0.0, 1.0);
	vec4 blue = vec4(0.0, 0.0, 1.0, 1.0);
	vec4 black = vec4(0.0, 0.0, 0.0, 1.0);
	vec4 white = vec4(1.0, 1.0, 1.0, 1.0);
	
	float perlin = texture(perlin_noise, f_uv).b;
	float perlin_high = texture(perlin_noise, f_uv).b;
	float perlin_mid = texture(perlin_noise, f_uv).g;
	float perlin_low = texture(perlin_noise, f_uv).r;
	float chaotic = texture(chaotic_noise, f_uv).b;
	float chaotic_r = texture(chaotic_noise, f_uv).r;
	float chaotic_b = texture(chaotic_noise, f_uv).b;

	vec2 center = vec2(0.5, 0.5); 

	if (door) {
		float noise_scroll_x = master_time * 0.13;
		float noise_scroll_y = master_time * 0.1;
		vec2 perlin_uv = vec2(noise_scroll_x, noise_scroll_y) + f_uv;
		vec2 perlin_sin = texture(perlin_noise, perlin_uv).rg;

		float uv_offset_amount = .04 * door_amount;
		vec2 uv_offset_r = perlin_sin * uv_offset_amount;

		vec2 uv_r = f_uv + uv_offset_r;
		uv_r = abs(uv_r);
		uv_r = clamp(uv_r, vec2(0.0), vec2(1.0));

		//color = texture(new_frame, uv_r);
		//if (dissolve) { return; }

		float trailer_width_amplitude = .025;
		float trailer_width_frequency = 0;
		float trailer_width = texture(perlin_noise, perlin_uv).r * trailer_width_amplitude;

		// Sample everything
		vec4 frame_sample = texture(new_frame, uv_r);
		vec4 f0_sample = texture(old_frame, uv_r);
		vec4 f1_sample = texture(old_frame, uv_r + vec2(trailer_width, 0));
		vec4 f2_sample = texture(old_frame, uv_r + vec2(trailer_width * 2, 0));

		vec4 trailer = vec4(0.0);
		trailer += f0_sample * .5;
		trailer += f1_sample * .3;
		trailer += f2_sample * .2;

		float mix_factor = door_amount;
		mix_factor = clamp(mix_factor, 0, 1);
		color = mix(frame_sample, trailer, mix_factor);
	}
	else if (screen_fade) {
		vec2 direction = f_uv - center;
		float distance = length(direction);

		vec4 new_frame_color = texture(new_frame, f_uv);
		vec4 old_frame_color = texture(freeze_frame, f_uv);
		old_frame_color.a = 1.0;

		float distance_offset = (perlin_low * .5);
		if (distance + distance_offset < screen_fade_time) {
			// Gently warp the screen
			// float noise_scroll_x = master_time * 0.01;
			// float noise_scroll_y = master_time * 0.01;
			// vec2 perlin_uv = vec2(noise_scroll_x, noise_scroll_y) + f_uv;
			// vec2 uv_offset = vec2(texture(perlin_noise, perlin_uv).g) * 0.01;

			// vec4 mix_color = texture(new_frame, f_uv + uv_offset);
			// color = mix(new_frame_color, mix_color, 1);
			color = new_frame_color;
		}
		else {
			color = old_frame_color;
		}
	}
	
	else if (dissolve) {
		float direction_noise_amount = .1;//.05;
		float velocity_noise_amount = .5;
		float threshold_noise_amount = .1;
		float particle_speed = 1.0;
		
		vec2 direction_offset = vec2(perlin_mid * direction_noise_amount, perlin_mid * direction_noise_amount); 
		
		vec2 direction = (f_uv + direction_offset) - center;
		float distance = length(direction);
		float base_speed = (1.0 - (distance / .707)) * particle_speed;
		vec2 uv_offset = base_speed * normalize(direction) * dissolve_time;
		uv_offset = uv_offset + (uv_offset * chaotic * velocity_noise_amount);

		vec2 uv_r = f_uv - uv_offset;
		uv_r = abs(uv_r);
		uv_r = clamp(uv_r, vec2(0.0), vec2(1.0));
				
        vec4 frame_sample = texture(new_frame, f_uv);
        vec4 dissolve_sample = texture(freeze_frame, uv_r);

		if (distance + perlin_mid * threshold_noise_amount < dissolve_time) {
			color = frame_sample;
			float mix_factor = (1 - dissolve_time) * (distance + .2);
			mix_factor = clamp(mix_factor, 0, 1);
			color = mix(frame_sample, dissolve_sample, mix_factor);
			//color = vec4(0.0, 0.0, 0.0, 1.0); 
		}
		else {
			color = dissolve_sample;

			float gray_speed = 3;
			float gray_mix = clamp(dissolve_time * gray_speed, 0, 1);
			color.g = mix(color.g, color.r, gray_mix);
			color.b = mix(color.b, color.r, gray_mix);
		}
	}

	else {
		color = texture(new_frame, f_uv);
	}

	color.b = 0.4;
	color.a = 1.0;
}
