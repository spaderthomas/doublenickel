#include "common.glsl"
#include "light.glsl"

in vec4 f_color;
in vec2 f_uv;

out vec4 color;

uniform float u_float;
uniform int u_int;
uniform vec2 u_vec2;
uniform vec3 u_vec3;
uniform vec4 u_vec4;
uniform mat3 u_mat3;
uniform mat4 u_mat4;
uniform sampler2D u_render_target;
uniform sampler2D u_pipeline_output;

void main () {
    DBG_FLOAT(u_mat4[0][0]);
    DBG_FLOAT(u_mat3[0][0]);
    DBG_FLOAT((u_vec4.x + u_vec4.y + u_vec4.z) / u_vec4.w);
    DBG_FLOAT((u_vec3.x + u_vec3.y) / u_vec3.z);
    DBG_FLOAT(u_vec2.x / u_vec2.y);
    DBG_FLOAT(float(u_int) / 2.0);
    DBG_FLOAT(u_float);
    DBG_TEX(u_render_target);

    DBG(indian_red);
    vec2 position = gl_FragCoord.xy + camera;

    vec4 sample_color = black;
    vec3 base_color = sample_color.rgb * sample_color.a;
    vec3 normal = vec3(0.0, 0.0, 0.0);

    color = black;

    Light global_light;
    // global_light.intensity = 0.5;
    global_light.intensity = 0.025;
    global_light.color = white;
    color.rgb += base_color.rgb * global_light.color.rgb * global_light.intensity;


    for (int i = 0; i < num_lights; i++) {
        Light light = lights[i];

        vec2 banded_uv = band_light_uvs(light, f_uv, position);
        vec2 banded_position = banded_uv * native_resolution + camera;;

        LitFragment lit_fragment = light_fragment(light, banded_position, normal);
        color.rgb += base_color * lit_fragment.light_color;
        color.rgb += lit_fragment.volumetric_color; 
    }

    color.a = 1.0;}
