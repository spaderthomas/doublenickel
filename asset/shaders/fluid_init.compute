#include "common.glsl"

layout (local_size_x = THREADS_PER_WORKGROUP) in;

#include "fluid.glsl"

void debug_init(uint i) {
	particles[i].color.r = 1.0;
	particles[i].color.g = 2.0;
	particles[i].color.b = 3.0;
	particles[i].color.a = 4.0;
	particles[i].position.x = 5.0;
	particles[i].position.y = 6.0;
	particles[i].predicted_position.x = 7.0;
	particles[i].predicted_position.y = 8.0;
	particles[i].local_velocity.x = 9.0;
	particles[i].local_velocity.y = 10.0;
}

void init_base(uint i) {
	vec2 seed = gl_GlobalInvocationID.xy;

	// POSITION
	float spawn_area = .25;
	float spawn_min = (1 - spawn_area) / 2;
	float spawn_max = spawn_area + spawn_min;
	//float particles_per_row = ceil(sqrt(system.num_particles));
	//float row = floor(i / particles_per_row); 
	//float col = mod(i, particles_per_row);

	vec2 box_min = vec2(system.pa.x + system.radius * spawn_min, system.pa.y + system.radius * spawn_min); 
	vec2 box_max = vec2(box_min.x + spawn_area * system.radius, box_min.y + spawn_area * system.radius); 
	
	//particles[i].position.y = mix(render_target.y * spawn_min, render_target.y * spawn_max, row / particles_per_row);
	//particles[i].position.x = mix(render_target.x * spawn_min, render_target.x * spawn_max, col / particles_per_row);
	//particles[i].position.x = RANDOM_FLOAT(seed, system.pa.x, system.pa.x + system.radius);
	//particles[i].position.y = RANDOM_FLOAT(seed, system.pa.y, system.pa.y + system.radius);

	float t = RANDOM_FLOAT(seed, 0.0, 1.0);
	vec2 point_on_axis = mix(system.pa, system.pb, t);

	t = RANDOM_FLOAT(seed, -system.radius, system.radius);
	vec2 dir;
	dir.x = RANDOM_FLOAT(seed, 0.0, 1.0);
	dir.y = RANDOM_FLOAT(seed, 0.0, 1.0);
	dir = normalize(dir);
	dir *= t;

	particles[i].position = point_on_axis + dir;
	
	//particles[i].position.x = point_on_axis
	//particles[i].position.y = RANDOM_FLOAT(seed, box_min.y, box_max.y);
	
	//particles[i].position.x = RANDOM_FLOAT(seed, box_min.x, box_max.x);
	//particles[i].position.y = RANDOM_FLOAT(seed, box_min.y, box_max.y);

	// float t = RANDOM_FLOAT(seed, 0.0, 1.0);
	// vec2 point_on_axis = mix(system.pa, system.pb, t);

	// vec2 direction;
	// direction.x = RANDOM_FLOAT(seed, -1.0, 1.0);
	// direction.y = RANDOM_FLOAT(seed, -1.0, 1.0);
	// direction = normalize(direction);

	// float max_distance = system.radius * .9;
	// float length = RANDOM_FLOAT(seed, -max_distance, max_distance);
	 
	// particles[i].position = point_on_axis + direction * length;	


	// VELOCITY
	particles[i].predicted_position = vec2(0.0, 0.0);

		
	// LOCAL VELOCITY
	// const float max_speed = 1.0;
	// particles[i].local_velocity.x = RANDOM_FLOAT(seed, -max_speed, max_speed);
	// particles[i].local_velocity.y = RANDOM_FLOAT(seed, -max_speed, max_speed);
		
	particles[i].local_velocity.x = 0.0;
	particles[i].local_velocity.y = 0.0;

		
	// COLOR
	//particles[i].color = make_red(row / particles_per_row);
	particles[i].color = white;


	// FLUID
	fluid[i].pressure = 0.0;
	fluid[i].density = 0.0;	
}

void init_density(uint i) {
}

void select_kernel(uint i) {
	if (fluid_kernel == FLUID_KERNEL_INIT_BASE) {
		init_base(i);
	}
	else if (fluid_kernel == FLUID_KERNEL_INIT_DENSITY) {
		init_density(i);
	}
}

void main() {
	uint i = claim_index();
	
	if (i < system.num_particles) {
		select_kernel(i);
	}
}
