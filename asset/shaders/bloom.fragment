#include "common.glsl"

in vec4 f_color;
in vec2 f_uv;

out vec4 color;

#define BLOOM_MODE_FILTER 0
#define BLOOM_MODE_BLUR 1
#define BLOOM_MODE_COMBINE 2
#define BLOOM_MODE_MAP 3
#define BLOOM_MODE_MAP_BLUR 4

uniform int mode;

uniform sampler2D unfiltered_frame;
uniform sampler2D bloomed_frame;

vec4 additive_blend(vec4 sample_color, vec4 bloom_color) {
  return sample_color + bloom_color;
}

vec4 screen_blend(vec4 sample_color, vec4 bloom_color) {
  return 1.0 - (1.0 - sample_color) * (1.0 - bloom_color);
}

vec4 burn_blend(vec4 base, vec4 blend) {
    return 1.0 - (1.0 - base) / clamp(blend, 0.01, 1.0);
}

vec4 dodge_blend(vec4 base, vec4 blend) {
    return base / (1.0 - clamp(blend, 0.0, 0.99));
}

// #define USE_SCREEN_BLEND 1
// #define USE_ADDITIVE_BLEND 1
// #define USE_BURN_BLEND 1
// #define USE_DODGE_BLEND 1

const float blur_step = scaled_pixels(1).x;
const float brightness_threshold = 0.05;
const float edge_threshold = 0.05 ;


void main () {

  if (mode == BLOOM_MODE_MAP) {
    vec4 sample_color = texture(unfiltered_frame, f_uv);

    float brightness = calc_perceived_lightness(sample_color);
    float saturation = HSV_SATURATION(rgb_to_hsv_4(sample_color));
    float boost = 0.5;

    color = vec4(
      0.0,
      0.0, 
      boost * (brightness - (1.0 - saturation)),
      1.0);
  }
  else if (mode == BLOOM_MODE_MAP_BLUR) {
    vec4 blurred_color = gaussian_blur_n_h(bloomed_frame, f_uv, 1.0, 5, blur_step);
    color = blurred_color;
  }



  else if (mode == BLOOM_MODE_FILTER) {
    vec4 sample_color = texture(unfiltered_frame, f_uv);
    float brightness = calc_brightness(sample_color);
    // color = vec4(sample_color.rgb * is_higher_than(brightness, brightness_threshold), 1.0);
    DBG(texture(unfiltered_frame, f_uv));
    
  }
  else if (mode == BLOOM_MODE_BLUR) {
    // DBG(texture(bloomed_frame, f_uv));
    // vec4 blurred_color = nonlinear_blur_n_h(bloomed_frame, f_uv, 3, blur_step, .75);
    vec4 blurred_color = gaussian_blur_n_h(bloomed_frame, f_uv, 1.0, 3, blur_step);

    color = blurred_color;
  }
  else if (mode == BLOOM_MODE_COMBINE) {
    // DBG(texture(bloomed_frame, f_uv));
    vec4 sample_color = texture(unfiltered_frame, f_uv);
    vec4 bloom_color = texture(bloomed_frame, f_uv);

    vec4 final_color = sample_color;
    #if USE_SCREEN_BLEND
      final_color = screen_blend(sample_color, bloom_color);
    #elif USE_ADDITIVE_BLEND
      final_color = additive_blend(sample_color, bloom_color);
    #elif USE_DODGE_BLEND
      final_color = dodge_blend(sample_color, bloom_color);
    #elif USE_BURN_BLEND
      final_color = burn_blend(sample_color, bloom_color);
    #else
      final_color = bloom_color;
    #endif


    color = final_color;
  }
}
