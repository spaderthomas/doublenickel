#include "common.glsl"
#include "sdf.glsl"

out vec4 color;
in vec4 f_color;
in vec2 f_uv;


// #define USE_RADIAL_UVS 1
#define USE_GRID_UVS 1

void main() {
	vec2 world = gl_FragCoord.xy + camera;

	float dist = 0.0;
	if (shape == SDF_CIRCLE) {
		dist = sdf_circle(world, point, radius);
	}
	else if (shape == SDF_ORIENTED_BOX) {
		dist = sdf_oriented_box(world, center_a, center_b, thickness);           
		// DBG(green);
	}


	const float num_uv_bands = 256;

#ifdef USE_GRID_UVS
	vec2 banded_uv = floor(f_uv * num_uv_bands) / num_uv_bands;

#elif USE_RADIAL_UVS
	vec2 centered_uv = f_uv - vec2(0.5);
	float theta = atan(centered_uv.y, centered_uv.x);
	float normalized_theta = (theta + 3.14159265) / (2.0 * 3.14159265);
	normalized_theta = abs(2 * normalized_theta - 1);
	normalized_theta = map_range(normalized_theta, 0, 1.0, 0.5, 1.0);

	// Apply banding to the angle
	float banded_theta = floor(normalized_theta * num_uv_bands) / num_uv_bands;
	vec2 banded_uv = f_uv * banded_theta;
#endif
	// Optional: Map banded_theta back to [0, 2*PI] if you want to use it for angular calculations
	// theta = banded_theta * 2.0 * 3.14159265;


	vec2 local_position = world - point;
	vec2 unit_position = local_position / radius;
	float direction = sign(dot(world, point));
	float is_inside_circle = step(0, -dist);

	float normalized_distance = -dist / radius;
	banded_uv = f_uv;
	// banded_uv = normalize(banded_uv);
	color = vec4(banded_uv.x, banded_uv.y, 1.0, 1.0) * is_inside_circle;
	// DBG_FLOAT(camera.x);
	// color.a = alpha;
	// DBG_FLOAT(abs(alpha));
}
