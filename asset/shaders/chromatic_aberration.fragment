#include "common.glsl"

out vec4 color;

in vec4 f_color;
in vec2 f_uv;

uniform sampler2D unprocessed_frame;
uniform sampler2D blur_map;

uniform int pixel_step;
uniform float edge_threshold;
uniform float red_adjust;
uniform float blue_adjust;
uniform float green_adjust;

void main() {
	float aberration_step = scaled_pixels(pixel_step).x;

	vec4 sample_center = sample_neighbor_h(unprocessed_frame, f_uv,  0);
	vec4 sample_left   = sample_neighbor_h(unprocessed_frame, f_uv, -aberration_step);
	vec4 sample_right  = sample_neighbor_h(unprocessed_frame, f_uv,  aberration_step);
	
	color = sample_center;

	float brightness = calc_brightness(sample_center);
	float brightness_right = calc_brightness(sample_right);
	float brightness_left = calc_brightness(sample_left);
	float brightness_delta = max(abs(brightness - brightness_left), abs(brightness - brightness_right));

	bool is_edge = brightness_delta > edge_threshold;
	if (is_edge) {
		const float final_green_adjust = clamp(
			(red_adjust + blue_adjust) / (3.0 - green_adjust),
			0.0, 1.0
		);

		color.r = sample_left.r * red_adjust;
		color.b = sample_right.b * blue_adjust;
		color.g = sample_center.g * final_green_adjust;

 	}
}
