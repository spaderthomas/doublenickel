#include "common.glsl"
#include "sdf.glsl"

out vec4 color;

in vec2 f_uv;
flat in uint f_index;


void main() {
	vec2 world = gl_FragCoord.xy + camera;
	SdfIndex sdf_index = decode_sdf_index(f_index);

	SdfHeader header = pull_header(sdf_index.buffer_index);
	float sdf_distance = 0.0;

	if (sdf_index.shape == SDF_CIRCLE) {
		SdfCircle circle = pull_circle(sdf_index.buffer_index);
		sdf_distance = sdf_circle(world, header.position, circle.radius);
	}
	else if (sdf_index.shape == SDF_ORIENTED_BOX) {
		DBG(red);
	}
	else {
		DBG(green);
	}

	// float dist = 0.0;
	// if (shape == SDF_CIRCLE) {
	// 	float radius = f_sdf_params_1[0];
	// 	dist = sdf_circle(world, f_position, radius);
	// }

	// const float edge_thickness = 1;

	float alpha = smoothstep(0.0, -header.edge_thickness, sdf_distance);
	color = vec4(header.color, alpha);
	// color = vec4(f_uv.x, f_uv.y, 1.0, alpha); 





	// DBG_MIX(color, red, .5);
	// color = vec4(f_color.xyz, alpha);

// 	// if (f_sdf_params[1] == 0.5) {
// 	// 	color = white;
// 	// }
}
