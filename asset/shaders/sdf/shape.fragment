#include "common.glsl"
#include "sdf.glsl"

out vec4 color;

in vec2 f_uv;
flat in uvec2 f_index;

float sdf_to_alpha(float sdf_distance, float edge_thickness) {
	return smoothstep(0.0, -edge_thickness, sdf_distance);
}

vec4 sdf_primitive(vec2 world, inout SdfDecodeContext context) {
	context.header = pull_header(context.index.buffer_index);

	context.sdf_distance = 0.0;	
	if (context.index.shape == SDF_CIRCLE) {
		SdfCircle circle = pull_circle(context.index.buffer_index);
		context.sdf_distance = sdf_circle(world, context.header.position, circle.radius);
	}
	else if (context.index.shape == SDF_RING) {
		SdfRing ring = pull_ring(context.index.buffer_index);
		context.sdf_distance = sdf_ring(world, context.header.position, ring.inner_radius, ring.outer_radius);
	}
	else if (context.index.shape == SDF_ORIENTED_BOX) {
		SdfOrientedBox box = pull_oriented_box(context.index.buffer_index);

		vec2 axis = vec2(cos(context.header.rotation), sin(context.header.rotation));
		vec2 offset = axis * box.size.x / 2;
		context.sdf_distance = sdf_oriented_box(world, context.header.position - offset, context.header.position + offset, box.size.y);
	}
	return vec4(context.header.color, sdf_to_alpha(context.sdf_distance, context.header.edge_thickness));
}

vec4 sdf_combination(vec2 world, inout SdfDecodeContext context) {
	uint combine_index = context.index.buffer_index;

	uint num_sdfs = PULL_U32(sdf_combine_data, combine_index);

	SdfCombineEntry entry = pull_sdf_combine_entry(combine_index);
	context.index = entry.index;
	sdf_primitive(world, context);


	float sdf_distance = context.sdf_distance;
	for (uint i = 1; i < num_sdfs; i++) {
		SdfCombineEntry entry = pull_sdf_combine_entry(combine_index);
		context.index = entry.index;
	// FN_DBG_SCALAR_EQ(context.index.shape, SDF_CIRCLE);
		sdf_primitive(world, context);

		if (entry.combine_op == SDF_COMBINE_OP_UNION) {
			sdf_distance = sdf_op_union(sdf_distance, context.sdf_distance, entry.kernel);
		}
		else if (entry.combine_op == SDF_COMBINE_OP_SUBTRACTION) {
			sdf_distance = sdf_op_subtraction(sdf_distance, context.sdf_distance, entry.kernel);
		}
		else if (entry.combine_op == SDF_COMBINE_OP_INTERSECTION) {
			sdf_distance = sdf_op_intersection(sdf_distance, context.sdf_distance, entry.kernel);
		}


	}
	return vec4(context.header.color, sdf_to_alpha(sdf_distance, context.header.edge_thickness));
}

void main() {
	vec2 world = gl_FragCoord.xy + camera;
	SdfDecodeContext context = sdf_decode_context(f_index);

	if (context.index.shape == SDF_COMBINE) {
		color = sdf_combination(world, context);
	}
	else {
		color = sdf_primitive(world, context);
	}
}
