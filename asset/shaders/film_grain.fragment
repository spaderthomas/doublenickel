#include "common.glsl"

out vec4 color;

in vec4 f_color;
in vec2 f_uv;

uniform float master_time;

uniform sampler2D new_frame;

uniform sampler2D perlin_noise;
uniform sampler2D chaotic_noise;
 
void main() {
	vec2 world_camera = camera.xy;
	world_camera.y -= 1080;
	world_camera.x /= 1920;
	world_camera.y /= 1080;
	
    vec4 base_color = color;

    // Generate some random noise using chaotic_noise texture or master_time
	float noise_scroll_x = master_time * 0.05;
	float noise_scroll_y = master_time * 0.05;
	vec2 perlin_uv = vec2(noise_scroll_x, noise_scroll_y) + f_uv;
	vec2 perlin_sin = texture(perlin_noise, perlin_uv).rg;

	float uv_offset_amount = 1;
	vec2 uv_offset_r = perlin_sin * uv_offset_amount;

	vec2 uv_r = f_uv + uv_offset_r + world_camera;
	uv_r = abs(uv_r);
	uv_r = clamp(uv_r, vec2(0.0), vec2(1.0));

	//float noise_value = texture(chaotic_noise, uv_r).r;

	vec2 new_uv = f_uv + world_camera;
	new_uv += new_uv * master_time / 256;
	new_uv += perlin_sin * uv_offset_amount;
	
	float noise_value = texture(chaotic_noise, new_uv).r;
	

	//float grain_intensity = 0.2;
	float grain_intensity = 0.0;
    float grain = (noise_value - 0.5) * grain_intensity;  // Shift noise around 0 and scale by intensity
    
    // Apply the grain effect by modifying the final color output
    base_color.rgb += grain;  // Add grain to the color channels (could also mix or multiply)

    // Ensure the final color is clamped between 0 and 1
    base_color.rgb = clamp(base_color.rgb, 0.0, 1.0);

    color = base_color;
	
	color.a = 1.0;
}
