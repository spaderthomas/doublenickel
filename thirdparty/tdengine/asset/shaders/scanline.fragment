#include "common.glsl"

out vec4 color;

in vec4 f_color;
in vec2 f_uv;

uniform sampler2D unprocessed_frame;
uniform sampler2D bloom_map;

uniform float oscillation_speed;
uniform float oscillation_intensity;
uniform float red_adjust;
uniform float blue_adjust;
uniform float green_adjust;
uniform float bright_adjust;
uniform float scanline_darkness;
uniform float scanline_min;
uniform float scanline_max;
uniform int scanline_height_px;

void main() {
	vec2 uv = f_uv + camera / output_resolution;

	const float scanline_height = scanline_height_px / output_resolution.y;

	const float num_scanlines = output_resolution.y / scanline_height_px;
	float scan_position = fract(uv.y * num_scanlines);
	float scanline_power = triangle_wave(scan_position - .5);
	scanline_power = map_range(scanline_power, 0.5, 1.0, scanline_min, scanline_max);
	scanline_power *= timed_sin_ex(oscillation_speed, 1.0 - oscillation_intensity, 1.0, pi / 2);

	// White things appear too dark when darkened the same as everything else, so add a tweakable
	// parameter which lets you make bright colors appear brighter when scanlined. 
	vec4 sample_color = texture(unprocessed_frame, f_uv);
	float pixel_brightness = calc_brightness(sample_color);
	float darken_factor = scanline_darkness + (bright_adjust * pixel_brightness);
	vec4 target_color = vec4(
		pow(sample_color.r * darken_factor, red_adjust),
		pow(sample_color.g * darken_factor, green_adjust),
		pow(sample_color.b * darken_factor, blue_adjust),
		1.0
	);
	color = mix(sample_color, target_color, scanline_power);

	return;
}
